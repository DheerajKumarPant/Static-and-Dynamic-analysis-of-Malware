import os
import re
import csv
import numpy as np
import pandas as pd
import pickle
import json

os.chdir('C:\\Dynamic_Analysis_RAWDATA\\Malware')
x = os.listdir('.')



features_behave_summ = ['directory_created','file_created','file_read', 'dll_loaded', 'regkey_opened',  
'file_failed', 'guid',  'file_exists', 'file_written' , 'file_opened', 'directory_enumerated', 'regkey_read',]

features_network=['udp','icmp','http','tcp','dns']

'''
features_api=['NtTerminateProcess', 'SetUnhandledExceptionFilter', 'NtCreateMutant', 'GetFileSize', 
'SetFilePointer', 'NtAllocateVirtualMemory', 'NtOpenKey', 'NtQuerySystemInformation', 'LdrLoadDll', 'NtQueryValueKey', 
'NtMapViewOfSection', 'NtCreateFile', 'NtOpenKeyEx', 'NtQueryInformationFile', 'NtClose', 'RegCloseKey', 
'NtProtectVirtualMemory', 'NtFreeVirtualMemory', 'LdrGetProcedureAddress', 'RegOpenKeyExW', 'GetSystemTimeAsFileTime', 
'SetErrorMode', 'LdrUnloadDll', 'LdrGetDllHandle', 'RegQueryValueExW', 'NtReadFile', 'RegOpenKeyExA']
'''
features = ['LABEL','INF0DURA','BEHGEN','BEHPROC']
features=features+features_network+features_behave_summ
# features=features.append(features_behave_summ)
# features=features.append(features_api)

len_of_features=len(features)

# print(len(features_api))
# print(len(intersection_features_api))
def convert_to_int(listofstruct,count):
    value=0.0
    if listofstruct[count][0:2] == "0x":
        value = int(listofstruct[count], 16)
    else:
        # print(listofstruct[count-1])
        value = float(listofstruct[count])
    return value

def openJSON(direc):
	f = open(direc)
	data=json.load(f)

	f.close()

	return data

def direct_access_features(data,final_features,counter):
	final_features.append([])
	final_features[counter].append('M') #Label for Malware is M
	try:
		final_features[counter].append(data['info']['duration'])
	except:
		final_features[counter].append(0)
	try:
		final_features[counter].append(len(data['behavior']['generic']))
	except:
		final_features[counter].append(0)
	try:
		final_features[counter].append(len(data['behavior']['processes']))
	except:
		final_features[counter].append(0)

counter = 0#zeroth row is label

final_features=[]
# final_features.append([])
'''
for i in range(len_of_features):
	final_features[0].append(features[i])
'''
for alpha in x:
    inside = os.listdir(alpha)

    for itr in inside:
        data = openJSON(os.path.join(alpha+'\\'+itr))
        	
        direct_access_features(data,final_features,counter)

        for net in features_network:
            if data['network'].get(net,-1) != -1:
                final_features[counter].append(len(data['network'][net]))
            else:
                final_features[counter].append(0)
        
        for summary in features_behave_summ:
            if data['behavior']['summary'].get(summary,-1) != -1 :
                final_features[counter].append(len(data['behavior']['summary'][summary]))
            else:
                final_features[counter].append(0)
        '''
        try:
            key = list(data['behavior']['apistats'].keys())[0]
            for api in features_api:
                if data['behavior']['apistats'][key].get(api,-1) != -1 :
                    final_features[counter].append(data['behavior']['apistats'][key][api])
                else:
                    final_features[counter].append(0)
        except:
            for api in features_api:
                final_features[counter].append(0)	
        ''' 


	# summary = data['behavior']['summary']

	# router.add(data['info']['route'])

	# for itr in summary:
		# dictionary[itr]=1
	# print(data)
        counter +=1
        print(counter)

# print(final_features)
pickle.dump(final_features, open('MAL_DYNAMIC', 'wb'))

        
        
